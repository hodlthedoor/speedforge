{"version":3,"file":"preload.js","sources":["../electron/preload.ts"],"sourcesContent":["/// <reference types=\"electron\" />\nconst { contextBridge, ipcRenderer } = require('electron');\n\n// Define the WidgetWindowOptions type without importing it\ninterface WidgetWindowOptions {\n  widgetId: string;\n  widgetType: string;\n  width?: number;\n  height?: number;\n  x?: number;\n  y?: number;\n  alwaysOnTop?: boolean;\n  params?: Record<string, any>;\n}\n\n// --------- Expose some API to the Renderer process ---------\ncontextBridge.exposeInMainWorld('electronAPI', {\n  ping: () => ipcRenderer.invoke('ping'),\n  // Invoke methods\n  invoke: (channel: string, ...args: any[]) => {\n    return ipcRenderer.invoke(channel, ...args);\n  },\n  // Send methods\n  send: (channel: string, ...args: any[]) => {\n    ipcRenderer.send(channel, ...args);\n  },\n  // Receive methods\n  on: (channel: string, callback: (...args: any[]) => void) => {\n    ipcRenderer.on(channel, (_event, ...args) => callback(...args));\n  },\n  // Remove listener\n  removeAllListeners: (channel: string) => {\n    ipcRenderer.removeAllListeners(channel);\n  },\n  // Widget specific methods\n  widgets: {\n    create: (options: WidgetWindowOptions) => {\n      return ipcRenderer.invoke('widget:create', options);\n    },\n    close: (widgetId: string) => {\n      return ipcRenderer.invoke('widget:close', widgetId);\n    },\n    getAll: () => {\n      return ipcRenderer.invoke('widget:getAll');\n    },\n    setPosition: (widgetId: string, x: number, y: number) => {\n      return ipcRenderer.invoke('widget:setPosition', { widgetId, x, y });\n    },\n    setSize: (widgetId: string, width: number, height: number) => {\n      return ipcRenderer.invoke('widget:setSize', { widgetId, width, height });\n    },\n    setAlwaysOnTop: (widgetId: string, alwaysOnTop: boolean) => {\n      return ipcRenderer.invoke('widget:setAlwaysOnTop', { widgetId, alwaysOnTop });\n    },\n    setOpacity: (widgetId: string, opacity: number) => {\n      return ipcRenderer.invoke('widget:setOpacity', { widgetId, opacity });\n    },\n    setVisible: (widgetId: string, visible: boolean) => {\n      return ipcRenderer.invoke('widget:setVisible', { widgetId, visible });\n    }\n  }\n});\n\n// Add drag functionality\ncontextBridge.exposeInMainWorld('electronDrag', {\n  // Function to enable dragging - we don't need this anymore since we use CSS\n  enableDrag: () => {\n    console.log('CSS-based dragging should be active');\n  }\n});\n"],"names":[],"mappings":"AACA,MAAM,EAAE,eAAe,gBAAgB,QAAQ,UAAU;AAezD,cAAc,kBAAkB,eAAe;AAAA,EAC7C,MAAM,MAAM,YAAY,OAAO,MAAM;AAAA;AAAA,EAErC,QAAQ,CAAC,YAAoB,SAAgB;AAC3C,WAAO,YAAY,OAAO,SAAS,GAAG,IAAI;AAAA,EAC5C;AAAA;AAAA,EAEA,MAAM,CAAC,YAAoB,SAAgB;AAC7B,gBAAA,KAAK,SAAS,GAAG,IAAI;AAAA,EACnC;AAAA;AAAA,EAEA,IAAI,CAAC,SAAiB,aAAuC;AAC/C,gBAAA,GAAG,SAAS,CAAC,WAAW,SAAS,SAAS,GAAG,IAAI,CAAC;AAAA,EAChE;AAAA;AAAA,EAEA,oBAAoB,CAAC,YAAoB;AACvC,gBAAY,mBAAmB,OAAO;AAAA,EACxC;AAAA;AAAA,EAEA,SAAS;AAAA,IACP,QAAQ,CAAC,YAAiC;AACjC,aAAA,YAAY,OAAO,iBAAiB,OAAO;AAAA,IACpD;AAAA,IACA,OAAO,CAAC,aAAqB;AACpB,aAAA,YAAY,OAAO,gBAAgB,QAAQ;AAAA,IACpD;AAAA,IACA,QAAQ,MAAM;AACL,aAAA,YAAY,OAAO,eAAe;AAAA,IAC3C;AAAA,IACA,aAAa,CAAC,UAAkB,GAAW,MAAc;AACvD,aAAO,YAAY,OAAO,sBAAsB,EAAE,UAAU,GAAG,GAAG;AAAA,IACpE;AAAA,IACA,SAAS,CAAC,UAAkB,OAAe,WAAmB;AAC5D,aAAO,YAAY,OAAO,kBAAkB,EAAE,UAAU,OAAO,QAAQ;AAAA,IACzE;AAAA,IACA,gBAAgB,CAAC,UAAkB,gBAAyB;AAC1D,aAAO,YAAY,OAAO,yBAAyB,EAAE,UAAU,aAAa;AAAA,IAC9E;AAAA,IACA,YAAY,CAAC,UAAkB,YAAoB;AACjD,aAAO,YAAY,OAAO,qBAAqB,EAAE,UAAU,SAAS;AAAA,IACtE;AAAA,IACA,YAAY,CAAC,UAAkB,YAAqB;AAClD,aAAO,YAAY,OAAO,qBAAqB,EAAE,UAAU,SAAS;AAAA,IAAA;AAAA,EACtE;AAEJ,CAAC;AAGD,cAAc,kBAAkB,gBAAgB;AAAA;AAAA,EAE9C,YAAY,MAAM;AAChB,YAAQ,IAAI,qCAAqC;AAAA,EAAA;AAErD,CAAC;"}
{"version":3,"file":"preload.js","sources":["../electron/preload.ts"],"sourcesContent":["/// <reference types=\"electron\" />\nimport { contextBridge, ipcRenderer } from 'electron';\n\n// API exposed to renderer process\ncontextBridge.exposeInMainWorld('electronAPI', {\n  // Basic info and communication functions\n  isElectron: true,\n  platform: process.platform,\n  \n  // Send message to main process\n  send: (channel: string, data?: any) => {\n    const validChannels = [\n      'telemetry:update',\n      'telemetry:connectionChange',\n      'widget:closeByEscape',\n      'widget:registerForUpdates'\n    ];\n    \n    if (validChannels.includes(channel)) {\n      ipcRenderer.send(channel, data);\n    } else {\n      console.warn(`Channel ${channel} is not allowed for sending`);\n    }\n  },\n  \n  // Add event listener to receive messages from main process\n  on: (channel: string, callback: (data: any) => void) => {\n    const validChannels = ['main-process-message', 'app:toggle-click-through'];\n    if (validChannels.includes(channel)) {\n      // Deliberately strip event as it includes `sender` \n      const subscription = (_event: any, data: any) => callback(data);\n      ipcRenderer.on(channel, subscription);\n      \n      return () => {\n        ipcRenderer.removeListener(channel, subscription);\n      };\n    }\n  },\n  \n  // Remove all listeners for a channel\n  removeAllListeners: (channel: string) => {\n    const validChannels = ['main-process-message', 'app:toggle-click-through'];\n    if (validChannels.includes(channel)) {\n      ipcRenderer.removeAllListeners(channel);\n    }\n  },\n  \n  // Invoke a function in the main process\n  invoke: async (channel: string, data?: any): Promise<any> => {\n    const validChannels = ['app:quit', 'app:toggleClickThrough'];\n    \n    if (validChannels.includes(channel)) {\n      return await ipcRenderer.invoke(channel, data);\n    }\n    \n    throw new Error(`Invoke not allowed for channel: ${channel}`);\n  },\n\n  // Application control functions\n  app: {\n    // Quit the application\n    quit: async (): Promise<any> => {\n      return await ipcRenderer.invoke('app:quit');\n    },\n    \n    // Toggle click-through mode\n    toggleClickThrough: async (state: boolean): Promise<any> => {\n      console.log(`Preload: Requesting toggleClickThrough with state=${state}`);\n      try {\n        const result = await ipcRenderer.invoke('app:toggleClickThrough', state);\n        console.log('Preload: Toggle response received:', result);\n        return result;\n      } catch (error) {\n        console.error('Preload: Error in toggleClickThrough:', error);\n        throw error;\n      }\n    }\n  }\n});\n\n// Log when preload script has completed\nconsole.log('Preload script executed successfully');\n"],"names":[],"mappings":"AACA,IAA2C,kBAAA,QAAA,UAAA;AAG3C,gBAAA,cAAc,kBAAkB,eAAe;AAAA;AAAA,EAE7C,YAAY;AAAA,EACZ,UAAU,QAAQ;AAAA;AAAA,EAGlB,MAAM,CAAC,SAAiB,SAAe;AACrC,UAAM,gBAAgB;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEI,QAAA,cAAc,SAAS,OAAO,GAAG;AACvB,sBAAA,YAAA,KAAK,SAAS,IAAI;AAAA,IAAA,OACzB;AACG,cAAA,KAAK,WAAW,OAAO,6BAA6B;AAAA,IAAA;AAAA,EAEhE;AAAA;AAAA,EAGA,IAAI,CAAC,SAAiB,aAAkC;AAChD,UAAA,gBAAgB,CAAC,wBAAwB,0BAA0B;AACrE,QAAA,cAAc,SAAS,OAAO,GAAG;AAEnC,YAAM,eAAe,CAAC,QAAa,SAAc,SAAS,IAAI;AAClD,sBAAA,YAAA,GAAG,SAAS,YAAY;AAEpC,aAAO,MAAM;AACC,wBAAA,YAAA,eAAe,SAAS,YAAY;AAAA,MAClD;AAAA,IAAA;AAAA,EAEJ;AAAA;AAAA,EAGA,oBAAoB,CAAC,YAAoB;AACjC,UAAA,gBAAgB,CAAC,wBAAwB,0BAA0B;AACrE,QAAA,cAAc,SAAS,OAAO,GAAG;AACnC,sBAAA,YAAY,mBAAmB,OAAO;AAAA,IAAA;AAAA,EAE1C;AAAA;AAAA,EAGA,QAAQ,OAAO,SAAiB,SAA6B;AACrD,UAAA,gBAAgB,CAAC,YAAY,wBAAwB;AAEvD,QAAA,cAAc,SAAS,OAAO,GAAG;AACnC,aAAO,MAAM,gBAAA,YAAY,OAAO,SAAS,IAAI;AAAA,IAAA;AAG/C,UAAM,IAAI,MAAM,mCAAmC,OAAO,EAAE;AAAA,EAC9D;AAAA;AAAA,EAGA,KAAK;AAAA;AAAA,IAEH,MAAM,YAA0B;AACvB,aAAA,MAAM,gBAAY,YAAA,OAAO,UAAU;AAAA,IAC5C;AAAA;AAAA,IAGA,oBAAoB,OAAO,UAAiC;AAClD,cAAA,IAAI,qDAAqD,KAAK,EAAE;AACpE,UAAA;AACF,cAAM,SAAS,MAAM,gBAAY,YAAA,OAAO,0BAA0B,KAAK;AAC/D,gBAAA,IAAI,sCAAsC,MAAM;AACjD,eAAA;AAAA,eACA,OAAO;AACN,gBAAA,MAAM,yCAAyC,KAAK;AACtD,cAAA;AAAA,MAAA;AAAA,IACR;AAAA,EACF;AAEJ,CAAC;AAGD,QAAQ,IAAI,sCAAsC;"}
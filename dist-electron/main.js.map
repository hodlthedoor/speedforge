{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain, screen } from 'electron';\nimport * as path from 'path';\nimport { fileURLToPath } from 'url';\n\n// In ES modules, we need to recreate __dirname and __filename\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nprocess.env.DIST = path.join(__dirname, '../dist');\nprocess.env.VITE_PUBLIC = app.isPackaged \n  ? process.env.DIST\n  : path.join(__dirname, '../public');\n\n// Store references to all windows\nconst windows: BrowserWindow[] = [];\n\n// Create a window for each display\nfunction createWindows() {\n  // Get all displays\n  const displays = screen.getAllDisplays();\n  console.log(`Found ${displays.length} displays`);\n  \n  // Create a window for each display\n  for (const display of displays) {\n    console.log(`Creating window for display: ${display.id}`, {\n      bounds: display.bounds,\n      workArea: display.workArea\n    });\n    \n    // Create the window with macOS-specific settings\n    const win = new BrowserWindow({\n      x: display.bounds.x,\n      y: display.bounds.y,\n      width: display.bounds.width,\n      height: display.bounds.height,\n      webPreferences: {\n        preload: path.join(__dirname, 'preload.js'),\n        nodeIntegration: false,\n        contextIsolation: true,\n        backgroundThrottling: false,\n      },\n      // Make the window transparent\n      transparent: true,\n      backgroundColor: '#00000000', // Fully transparent\n      frame: false,\n      skipTaskbar: true,\n      hasShadow: false,\n      titleBarStyle: 'hidden',\n      titleBarOverlay: false,\n      fullscreen: false,\n      // Don't use simpleFullscreen as it can create issues on macOS\n      simpleFullscreen: false,\n      // Set to floating window type on macOS\n      type: 'panel', // Important for macOS transparency\n      // Remove vibrancy - it can cause transparency issues\n      vibrancy: null as any,\n      visualEffectState: null as any,\n      // Ensure the window accepts focus when needed\n      focusable: true\n    });\n\n    // Set specific window properties for macOS\n    if (process.platform === 'darwin') {\n      win.setWindowButtonVisibility(false);\n      // Use level 'floating' for macOS to keep window above others\n      win.setAlwaysOnTop(true, 'floating', 1);\n      \n      // Additional macOS configuration to ensure transparency\n      win.setBackgroundColor('#00000000');\n      \n      // On macOS, we need to set opacity to ensure transparency\n      win.setOpacity(1.0);\n    }\n\n    // Start with click-through disabled for easier debugging\n    win.setIgnoreMouseEvents(false);\n    \n    // Load the app\n    const mainUrl = process.env.VITE_DEV_SERVER_URL || `file://${path.join(process.env.DIST, 'index.html')}`;\n    win.loadURL(mainUrl);\n    \n    // Store the window reference\n    windows.push(win);\n    \n    // Log when window is ready\n    win.webContents.on('did-finish-load', () => {\n      console.log(`Window for display ${display.id} is ready`);\n      \n      // For macOS, make sure we're the right size after loading\n      if (process.platform === 'darwin') {\n        win.setBounds({\n          x: display.bounds.x,\n          y: display.bounds.y,\n          width: display.bounds.width,\n          height: display.bounds.height\n        });\n        \n        // Force an opacity update to ensure transparency\n        win.setOpacity(0.99);\n        setTimeout(() => win.setOpacity(1.0), 100);\n      }\n    });\n    \n    // Open DevTools for primary display in dev mode (as a separate window)\n    if (process.env.VITE_DEV_SERVER_URL && display.id === screen.getPrimaryDisplay().id) {\n      win.webContents.openDevTools({ mode: 'detach' });\n    }\n  }\n}\n\n// Setup basic IPC listeners\nfunction setupIpcListeners() {\n  // Quit the application\n  ipcMain.handle('app:quit', () => {\n    console.log('Quitting application');\n    app.quit();\n    return { success: true };\n  });\n  \n  // Toggle click-through mode\n  ipcMain.handle('app:toggleClickThrough', (event, state) => {\n    console.log(`Toggling click-through from main process to: ${state}`);\n    \n    // Get the window that sent this request\n    const win = BrowserWindow.fromWebContents(event.sender);\n    if (!win) {\n      console.error('Could not find window associated with this request');\n      return { success: false, error: 'Window not found' };\n    }\n    \n    try {\n      // When we set ignore mouse events, we can choose to forward specific elements\n      if (state === true) {\n        // Enable click-through but forward clicks on specific UI elements\n        // The 'forward' option in Electron 13+ only accepts boolean values\n        // We'll use true to forward all events to the web contents\n        win.setIgnoreMouseEvents(true, { forward: true });\n        \n        // Using pointer-events CSS in the renderer will control which elements receive clicks\n        // This approach allows renderer to decide which elements should get mouse events\n        console.log('Click-through enabled with forwarding. UI controls use CSS to handle clicks.');\n      } else {\n        // Disable click-through completely\n        win.setIgnoreMouseEvents(false);\n        console.log('Click-through disabled');\n      }\n      return { success: true, state };\n    } catch (error) {\n      console.error('Error toggling click-through:', error);\n      return { success: false, error: String(error) };\n    }\n  });\n}\n\n// When Electron is ready\napp.whenReady().then(() => {\n  createWindows();\n  setupIpcListeners();\n  \n  // Log display information for debugging\n  const displays = screen.getAllDisplays();\n  const primary = screen.getPrimaryDisplay();\n  console.log('Primary display:', primary);\n  console.log('All displays:', displays);\n});\n\n// Clean up when all windows are closed\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit();\n});\n\n// Re-create windows if activated and no windows exist\napp.on('activate', () => {\n  if (windows.length === 0) createWindows();\n});\n\n// Clean up before quitting\napp.on('before-quit', () => {\n  // Remove all IPC handlers\n  ipcMain.removeHandler('app:quit');\n  ipcMain.removeHandler('app:toggleClickThrough');\n});\n"],"names":[],"mappings":"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"}
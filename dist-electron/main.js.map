{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain, screen, globalShortcut } from 'electron';\nimport * as path from 'path';\nimport { fileURLToPath } from 'url';\n\n// In ES modules, we need to recreate __dirname and __filename\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nprocess.env.DIST = path.join(__dirname, '../dist');\nprocess.env.VITE_PUBLIC = app.isPackaged \n  ? process.env.DIST\n  : path.join(__dirname, '../public');\n\n// Store references to all windows\nconst windows: BrowserWindow[] = [];\n\n// Create a variable to hold the interval ID\nlet stayOnTopInterval: NodeJS.Timeout | null = null;\n\n// Add display-related events to handle monitors being added/removed\nlet autoCreateWindowsForNewDisplays = true;\n\n// Create a window for each display\nfunction createWindows() {\n  // Get all displays\n  const displays = screen.getAllDisplays();\n  console.log(`Found ${displays.length} displays`);\n  \n  // Create a window for each display\n  for (const display of displays) {\n    console.log(`Creating window for display: ${display.id}`, {\n      bounds: display.bounds,\n      workArea: display.workArea\n    });\n    \n    // Create the window with macOS-specific settings\n    const win = new BrowserWindow({\n      x: display.bounds.x,\n      y: display.bounds.y,\n      width: display.bounds.width,\n      height: display.bounds.height,\n      webPreferences: {\n        preload: path.join(__dirname, 'preload.js'),\n        nodeIntegration: false,\n        contextIsolation: true,\n        backgroundThrottling: false,\n      },\n      // Make the window transparent\n      transparent: true,\n      backgroundColor: '#00000000', // Fully transparent\n      frame: false,\n      skipTaskbar: true,\n      hasShadow: false,\n      titleBarStyle: 'hidden',\n      titleBarOverlay: false,\n      fullscreen: false,\n      // Don't use simpleFullscreen as it can create issues on macOS\n      simpleFullscreen: false,\n      // Set to floating window type on macOS\n      type: 'panel', // Important for macOS transparency\n      // Remove vibrancy - it can cause transparency issues\n      vibrancy: null as any,\n      visualEffectState: null as any,\n      // Ensure the window accepts focus when needed\n      focusable: true,\n      // Always stay on top of other windows\n      alwaysOnTop: true\n    });\n\n    // Set specific window properties for macOS\n    if (process.platform === 'darwin') {\n      win.setWindowButtonVisibility(false);\n      // Use level 'floating' for macOS to keep window above others\n      win.setAlwaysOnTop(true, 'screen-saver', 1); // Use screen-saver level which is higher than floating\n      \n      // Additional macOS configuration to ensure transparency\n      win.setBackgroundColor('#00000000');\n      \n      // On macOS, we need to set opacity to ensure transparency\n      win.setOpacity(1.0);\n    } else if (process.platform === 'win32') {\n      // For Windows, set a more aggressive always-on-top level\n      win.setAlwaysOnTop(true, 'screen-saver');\n    } else {\n      // For Linux and other platforms\n      win.setAlwaysOnTop(true);\n    }\n\n    // Start with click-through enabled\n    win.setIgnoreMouseEvents(true, { forward: true });\n    \n    // Set window title to reflect click-through state\n    win.setTitle('Speedforge (click-through:true)');\n    \n    // Load the app\n    const mainUrl = process.env.VITE_DEV_SERVER_URL || `file://${path.join(process.env.DIST, 'index.html')}`;\n    win.loadURL(mainUrl);\n    \n    // Store the window reference\n    windows.push(win);\n    \n    // Log when window is ready\n    win.webContents.on('did-finish-load', () => {\n      console.log(`Window for display ${display.id} is ready`);\n      \n      // For macOS, make sure we're the right size after loading\n      if (process.platform === 'darwin') {\n        win.setBounds({\n          x: display.bounds.x,\n          y: display.bounds.y,\n          width: display.bounds.width,\n          height: display.bounds.height\n        });\n        \n        // Force an opacity update to ensure transparency\n        win.setOpacity(0.99);\n        setTimeout(() => win.setOpacity(1.0), 100);\n      }\n    });\n    \n    // Open DevTools for primary display in dev mode (as a separate window)\n    if (process.env.VITE_DEV_SERVER_URL && display.id === screen.getPrimaryDisplay().id) {\n      win.webContents.openDevTools({ mode: 'detach' });\n    }\n  }\n}\n\n// Setup basic IPC listeners\nfunction setupIpcListeners() {\n  // Quit the application\n  ipcMain.handle('app:quit', () => {\n    console.log('Quitting application');\n    try {\n      // Try to close all windows first\n      for (const win of windows) {\n        if (!win.isDestroyed()) {\n          win.close();\n        }\n      }\n      \n      // Clear out the windows array\n      windows.length = 0;\n      \n      // Schedule app quit to happen after current event loop\n      setTimeout(() => {\n        try {\n          app.quit();\n        } catch (error) {\n          console.log('Error during app.quit():', error);\n          // Force exit as a last resort\n          process.exit(0);\n        }\n      }, 100);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error during quit process:', error);\n      // Force exit as a last resort\n      process.exit(0);\n      return { success: false, error: String(error) };\n    }\n  });\n  \n  // Toggle auto-create windows for new displays\n  ipcMain.handle('app:toggleAutoNewWindows', (event, state) => {\n    console.log(`Toggling auto-create new windows for displays from main process to: ${state}`);\n    autoCreateWindowsForNewDisplays = state;\n    return { success: true, state };\n  });\n  \n  // Toggle click-through mode\n  ipcMain.handle('app:toggleClickThrough', (event, state) => {\n    console.log(`Toggling click-through from main process to: ${state}`);\n    \n    // Get the window that sent this request\n    const win = BrowserWindow.fromWebContents(event.sender);\n    if (!win) {\n      console.error('Could not find window associated with this request');\n      return { success: false, error: 'Window not found' };\n    }\n    \n    try {\n      // When we set ignore mouse events, we can choose to forward specific elements\n      if (state === true) {\n        // Enable click-through but forward clicks on specific UI elements\n        // The 'forward' option in Electron 13+ only accepts boolean values\n        // We'll use true to forward all events to the web contents\n        console.log('Setting ignore mouse events with forwarding');\n        \n        // Important: Only ignore mouse events, not keyboard events\n        // This ensures that keyboard shortcuts like ESC still work when click-through is active\n        win.setIgnoreMouseEvents(true, { forward: true });\n        \n        // Ensure the window can still receive keyboard focus - needed for ESC key\n        win.focusOnWebView();\n        \n        // Ensure the window stays on top with the highest level\n        if (process.platform === 'darwin') {\n          win.setAlwaysOnTop(true, 'screen-saver', 1);\n        } else if (process.platform === 'win32') {\n          win.setAlwaysOnTop(true, 'screen-saver');\n        } else {\n          win.setAlwaysOnTop(true);\n        }\n        \n        // Using pointer-events CSS in the renderer will control which elements receive clicks\n        // This approach allows renderer to decide which elements should get mouse events\n        console.log('Click-through enabled with forwarding. UI controls use CSS to handle clicks.');\n      } else {\n        // Disable click-through completely\n        console.log('Disabling ignore mouse events');\n        win.setIgnoreMouseEvents(false);\n        \n        // Make sure window still stays on top with the highest level\n        if (process.platform === 'darwin') {\n          win.setAlwaysOnTop(true, 'screen-saver', 1);\n        } else if (process.platform === 'win32') {\n          win.setAlwaysOnTop(true, 'screen-saver');\n        } else {\n          win.setAlwaysOnTop(true);\n        }\n        \n        console.log('Click-through disabled');\n      }\n      \n      const response = { success: true, state };\n      console.log('Returning response:', response);\n      return response;\n    } catch (error) {\n      console.error('Error toggling click-through:', error);\n      const errorResponse = { success: false, error: String(error) };\n      console.log('Returning error response:', errorResponse);\n      return errorResponse;\n    }\n  });\n}\n\n// Clean up when all windows are closed\napp.on('window-all-closed', () => {\n  // Unregister global shortcuts\n  globalShortcut.unregisterAll();\n  \n  if (process.platform !== 'darwin') app.quit();\n});\n\n// Re-create windows if activated and no windows exist\napp.on('activate', () => {\n  if (windows.length === 0) createWindows();\n});\n\n// Clean up before quitting\napp.on('before-quit', () => {\n  console.log('Performing cleanup before quit');\n  \n  // Clear the stay-on-top interval\n  if (stayOnTopInterval) {\n    clearInterval(stayOnTopInterval);\n    stayOnTopInterval = null;\n  }\n  \n  // Unregister global shortcuts\n  globalShortcut.unregisterAll();\n  \n  // Remove all IPC handlers\n  ipcMain.removeHandler('app:quit');\n  ipcMain.removeHandler('app:toggleAutoNewWindows');\n  ipcMain.removeHandler('app:toggleClickThrough');\n  \n  // Close windows gracefully\n  for (const win of windows) {\n    try {\n      if (!win.isDestroyed()) {\n        win.removeAllListeners();\n        win.setClosable(true);\n        win.close();\n      }\n    } catch (error) {\n      console.error('Error closing window:', error);\n    }\n  }\n  \n  // Clear windows array\n  windows.length = 0;\n});\n\n// When Electron is ready\napp.whenReady().then(() => {\n  // Set application name for process manager\n  app.setName('Speedforge');\n  \n  createWindows();\n  setupIpcListeners();\n  \n  // Set up an interval to periodically ensure all windows stay on top\n  stayOnTopInterval = setInterval(() => {\n    for (const win of windows) {\n      if (!win.isDestroyed()) {\n        if (process.platform === 'darwin') {\n          win.setAlwaysOnTop(true, 'screen-saver', 1);\n        } else if (process.platform === 'win32') {\n          win.setAlwaysOnTop(true, 'screen-saver');\n        } else {\n          win.setAlwaysOnTop(true);\n        }\n      }\n    }\n  }, 1000); // Check every second\n  \n  // Register global shortcut for Ctrl+Space to toggle click-through\n  globalShortcut.register('CommandOrControl+Space', () => {\n    console.log('Global Ctrl+Space shortcut triggered');\n    \n    // Toggle click-through for all windows\n    for (const win of windows) {\n      // Get current click-through state from window\n      const isCurrentlyClickThrough = win.getTitle().includes('click-through:true');\n      const newState = !isCurrentlyClickThrough;\n      \n      console.log(`Global shortcut toggling click-through from ${isCurrentlyClickThrough} to ${newState}`);\n      \n      // Send message to renderer\n      win.webContents.send('app:toggle-click-through', newState);\n      \n      // Update window title with state for tracking\n      win.setTitle(`Speedforge (click-through:${newState})`);\n    }\n  });\n  \n  // Setup screen event listeners now that the app is ready\n  screen.on('display-added', (event, display) => {\n    console.log('New display detected:', display);\n    \n    // Only create window if auto-create is enabled\n    if (!autoCreateWindowsForNewDisplays) {\n      console.log('Auto-create new windows is disabled, skipping window creation for new display');\n      return;\n    }\n    \n    // Create a window for the newly added display\n    const win = new BrowserWindow({\n      x: display.bounds.x,\n      y: display.bounds.y,\n      width: display.bounds.width,\n      height: display.bounds.height,\n      webPreferences: {\n        preload: path.join(__dirname, 'preload.js'),\n        nodeIntegration: false,\n        contextIsolation: true,\n        backgroundThrottling: false,\n      },\n      transparent: true,\n      backgroundColor: '#00000000',\n      frame: false,\n      skipTaskbar: true,\n      hasShadow: false,\n      titleBarStyle: 'hidden',\n      titleBarOverlay: false,\n      fullscreen: false,\n      type: 'panel',\n      vibrancy: null as any,\n      visualEffectState: null as any,\n      focusable: true,\n      alwaysOnTop: true\n    });\n\n    // Set platform-specific settings\n    if (process.platform === 'darwin') {\n      win.setWindowButtonVisibility(false);\n      win.setAlwaysOnTop(true, 'screen-saver', 1);\n      win.setBackgroundColor('#00000000');\n      win.setOpacity(1.0);\n    } else if (process.platform === 'win32') {\n      win.setAlwaysOnTop(true, 'screen-saver');\n    } else {\n      win.setAlwaysOnTop(true);\n    }\n\n    // Start with click-through enabled\n    win.setIgnoreMouseEvents(true, { forward: true });\n    win.setTitle('Speedforge (click-through:true)');\n    \n    // Load the app\n    const mainUrl = process.env.VITE_DEV_SERVER_URL || `file://${path.join(process.env.DIST, 'index.html')}`;\n    win.loadURL(mainUrl);\n    \n    // Store the window reference\n    windows.push(win);\n    \n    console.log(`Created new window for display ${display.id}`);\n  });\n\n  screen.on('display-removed', (event, display) => {\n    console.log('Display removed:', display);\n    // Optional: You could close windows associated with this display\n    // For now, we'll leave them open as the user might want to reposition widgets\n  });\n  \n  // Log display information for debugging\n  const displays = screen.getAllDisplays();\n  const primary = screen.getPrimaryDisplay();\n  console.log('Primary display:', primary);\n  console.log('All displays:', displays);\n});\n"],"names":[],"mappings":"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"}
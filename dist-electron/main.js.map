{"version":3,"file":"main.js","sources":["../node_modules/one-time/index.js","../node_modules/say/platform/base.js","../node_modules/say/platform/linux.js","../node_modules/say/platform/darwin.js","../node_modules/say/platform/win32.js","../node_modules/say/index.js","../electron/speech/speechModule.mjs","../electron/main.ts"],"sourcesContent":["'use strict';\n\n/**\n * Wrap callbacks to prevent double execution.\n *\n * @param {Function} fn Function that should only be called once.\n * @returns {Function} A wrapped callback which prevents execution.\n * @api public\n */\nmodule.exports = function one(fn) {\n  var called = 0\n    , value;\n\n  /**\n   * The function that prevents double execution.\n   *\n   * @api private\n   */\n  function onetime() {\n    if (called) return value;\n\n    called = 1;\n    value = fn.apply(this, arguments);\n    fn = null;\n\n    return value;\n  }\n\n  //\n  // To make debugging more easy we want to use the name of the supplied\n  // function. So when you look at the functions that are assigned to event\n  // listeners you don't see a load of `onetime` functions but actually the\n  // names of the functions that this module will call.\n  //\n  onetime.displayName = fn.displayName || fn.name || onetime.displayName || onetime.name;\n  return onetime;\n};\n","const childProcess = require('child_process')\nconst once = require('one-time')\n\nclass SayPlatformBase {\n  constructor () {\n    this.child = null\n    this.baseSpeed = 0\n  }\n\n  /**\n   * Uses system libraries to speak text via the speakers.\n   *\n   * @param {string} text Text to be spoken\n   * @param {string|null} voice Name of voice to be spoken with\n   * @param {number|null} speed Speed of text (e.g. 1.0 for normal, 0.5 half, 2.0 double)\n   * @param {Function|null} callback A callback of type function(err) to return.\n   */\n  speak (text, voice, speed, callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {}\n    }\n\n    callback = once(callback)\n\n    if (!text) {\n      return setImmediate(() => {\n        callback(new TypeError('say.speak(): must provide text parameter'))\n      })\n    }\n\n    let { command, args, pipedData, options } = this.buildSpeakCommand({ text, voice, speed })\n\n    this.child = childProcess.spawn(command, args, options)\n\n    this.child.stdin.setEncoding('ascii')\n    this.child.stderr.setEncoding('ascii')\n\n    if (pipedData) {\n      this.child.stdin.end(pipedData)\n    }\n\n    this.child.stderr.once('data', (data) => {\n      // we can't stop execution from this function\n      callback(new Error(data))\n    })\n\n    this.child.addListener('exit', (code, signal) => {\n      if (code === null || signal !== null) {\n        return callback(new Error(`say.speak(): could not talk, had an error [code: ${code}] [signal: ${signal}]`))\n      }\n\n      this.child = null\n\n      callback(null)\n    })\n  }\n\n  /**\n   * Uses system libraries to speak text via the speakers.\n   *\n   * @param {string} text Text to be spoken\n   * @param {string|null} voice Name of voice to be spoken with\n   * @param {number|null} speed Speed of text (e.g. 1.0 for normal, 0.5 half, 2.0 double)\n   * @param {string} filename Path to file to write audio to, e.g. \"greeting.wav\"\n   * @param {Function|null} callback A callback of type function(err) to return.\n   */\n  export (text, voice, speed, filename, callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {}\n    }\n\n    callback = once(callback)\n\n    if (!text) {\n      return setImmediate(() => {\n        callback(new TypeError('say.export(): must provide text parameter'))\n      })\n    }\n\n    if (!filename) {\n      return setImmediate(() => {\n        callback(new TypeError('say.export(): must provide filename parameter'))\n      })\n    }\n\n    try {\n      var { command, args, pipedData, options } = this.buildExportCommand({ text, voice, speed, filename })\n    } catch (error) {\n      return setImmediate(() => {\n        callback(error)\n      })\n    }\n\n    this.child = childProcess.spawn(command, args, options)\n\n    this.child.stdin.setEncoding('ascii')\n    this.child.stderr.setEncoding('ascii')\n\n    if (pipedData) {\n      this.child.stdin.end(pipedData)\n    }\n\n    this.child.stderr.once('data', (data) => {\n      // we can't stop execution from this function\n      callback(new Error(data))\n    })\n\n    this.child.addListener('exit', (code, signal) => {\n      if (code === null || signal !== null) {\n        return callback(new Error(`say.export(): could not talk, had an error [code: ${code}] [signal: ${signal}]`))\n      }\n\n      this.child = null\n\n      callback(null)\n    })\n  }\n\n  /**\n   * Stops currently playing audio. There will be unexpected results if multiple audios are being played at once\n   *\n   * TODO: If two messages are being spoken simultaneously, childD points to new instance, no way to kill previous\n   *\n   * @param {Function|null} callback A callback of type function(err) to return.\n   */\n  stop (callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {}\n    }\n\n    callback = once(callback)\n\n    if (!this.child) {\n      return setImmediate(() => {\n        callback(new Error('say.stop(): no speech to kill'))\n      })\n    }\n\n    this.runStopCommand()\n\n    this.child = null\n\n    callback(null)\n  }\n\n  convertSpeed (speed) {\n    return Math.ceil(this.baseSpeed * speed)\n  }\n\n  /**\n   * Get Installed voices on system\n   * @param {Function} callback A callback of type function(err,voices) to return.\n   */\n  getInstalledVoices (callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {}\n    }\n    callback = once(callback)\n\n    let { command, args } = this.getVoices()\n    var voices = []\n    this.child = childProcess.spawn(command, args)\n\n    this.child.stdin.setEncoding('ascii')\n    this.child.stderr.setEncoding('ascii')\n\n    this.child.stderr.once('data', (data) => {\n      // we can't stop execution from this function\n      callback(new Error(data))\n    })\n    this.child.stdout.on('data', function (data) {\n      voices += data\n    })\n\n    this.child.addListener('exit', (code, signal) => {\n      if (code === null || signal !== null) {\n        return callback(new Error(`say.getInstalledVoices(): could not get installed voices, had an error [code: ${code}] [signal: ${signal}]`))\n      }\n      if (voices.length > 0) {\n        voices = voices.split('\\r\\n')\n        voices = (voices[voices.length - 1] === '') ? voices.slice(0, voices.length - 1) : voices\n      }\n      this.child = null\n\n      callback(null, voices)\n    })\n\n    this.child.stdin.end()\n  }\n}\n\nmodule.exports = SayPlatformBase\n","const SayPlatformBase = require('./base.js')\n\nconst BASE_SPEED = 100\nconst COMMAND = 'festival'\n\nclass SayPlatformLinux extends SayPlatformBase {\n  constructor () {\n    super()\n    this.baseSpeed = BASE_SPEED\n  }\n\n  buildSpeakCommand ({ text, voice, speed }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    args.push('--pipe')\n\n    if (speed) {\n      pipedData += `(Parameter.set 'Audio_Command \"aplay -q -c 1 -t raw -f s16 -r $(($SR*${this.convertSpeed(speed)}/100)) $FILE\") `\n    }\n\n    if (voice) {\n      pipedData += `(${voice}) `\n    }\n\n    pipedData += `(SayText \"${text}\")`\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  buildExportCommand ({ text, voice, speed, filename }) {\n    throw new Error(`say.export(): does not support platform ${this.platform}`)\n  }\n\n  runStopCommand () {\n    // TODO: Need to ensure the following is true for all users, not just me. Danger Zone!\n    // On my machine, original childD.pid process is completely gone. Instead there is now a\n    // childD.pid + 1 sh process. Kill it and nothing happens. There's also a childD.pid + 2\n    // aplay process. Kill that and the audio actually stops.\n    process.kill(this.child.pid + 2)\n  }\n\n  getVoices () {\n    throw new Error(`say.export(): does not support platform ${this.platform}`)\n  }\n}\n\nmodule.exports = SayPlatformLinux\n","const SayPlatformBase = require('./base.js')\n\nconst BASE_SPEED = 175\nconst COMMAND = 'say'\n\nclass SayPlatformDarwin extends SayPlatformBase {\n  constructor () {\n    super()\n    this.baseSpeed = BASE_SPEED\n  }\n\n  buildSpeakCommand ({ text, voice, speed }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    if (!voice) {\n      args.push(text)\n    } else {\n      args.push('-v', voice, text)\n    }\n\n    if (speed) {\n      args.push('-r', this.convertSpeed(speed))\n    }\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  buildExportCommand ({ text, voice, speed, filename }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    if (!voice) {\n      args.push(text)\n    } else {\n      args.push('-v', voice, text)\n    }\n\n    if (speed) {\n      args.push('-r', this.convertSpeed(speed))\n    }\n\n    if (filename) {\n      args.push('-o', filename, '--data-format=LEF32@32000')\n    }\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  runStopCommand () {\n    this.child.stdin.pause()\n    this.child.kill()\n  }\n\n  getVoices () {\n    throw new Error(`say.export(): does not support platform ${this.platform}`)\n  }\n}\n\nmodule.exports = SayPlatformDarwin\n","const childProcess = require('child_process')\n\nconst SayPlatformBase = require('./base.js')\n\nconst BASE_SPEED = 0 // Unsupported\nconst COMMAND = 'powershell'\n\nclass SayPlatformWin32 extends SayPlatformBase {\n  constructor () {\n    super()\n    this.baseSpeed = BASE_SPEED\n  }\n\n  buildSpeakCommand ({ text, voice, speed }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    let psCommand = `Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;`\n\n    if (voice) {\n      psCommand += `$speak.SelectVoice('${voice}');`\n    }\n\n    if (speed) {\n      let adjustedSpeed = this.convertSpeed(speed || 1)\n      psCommand += `$speak.Rate = ${adjustedSpeed};`\n    }\n\n    psCommand += `$speak.Speak([Console]::In.ReadToEnd())`\n\n    pipedData += text\n    args.push(psCommand)\n    options.shell = true\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  buildExportCommand ({ text, voice, speed, filename }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    let psCommand = `Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;`\n\n    if (voice) {\n      psCommand += `$speak.SelectVoice('${voice}');`\n    }\n\n    if (speed) {\n      let adjustedSpeed = this.convertSpeed(speed || 1)\n      psCommand += `$speak.Rate = ${adjustedSpeed};`\n    }\n\n    if (!filename) throw new Error('Filename must be provided in export();')\n    else {\n      psCommand += `$speak.SetOutputToWaveFile('${filename}');`\n    }\n\n    psCommand += `$speak.Speak([Console]::In.ReadToEnd());$speak.Dispose()`\n\n    pipedData += text\n    args.push(psCommand)\n    options.shell = true\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  runStopCommand () {\n    this.child.stdin.pause()\n    childProcess.exec(`taskkill /pid ${this.child.pid} /T /F`)\n  }\n\n  convertSpeed (speed) {\n    // Overriden to map playback speed (as a ratio) to Window's values (-10 to 10, zero meaning x1.0)\n    return Math.max(-10, Math.min(Math.round((9.0686 * Math.log(speed)) - 0.1806), 10))\n  }\n\n  getVoices () {\n    let args = []\n    let psCommand = 'Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;$speak.GetInstalledVoices() | % {$_.VoiceInfo.Name}'\n    args.push(psCommand)\n    return { command: COMMAND, args }\n  }\n}\n\nmodule.exports = SayPlatformWin32\n","const SayLinux = require('./platform/linux.js')\nconst SayMacos = require('./platform/darwin.js')\nconst SayWin32 = require('./platform/win32.js')\n\nconst MACOS = 'darwin'\nconst LINUX = 'linux'\nconst WIN32 = 'win32'\n\nclass Say {\n  constructor (platform) {\n    if (!platform) {\n      platform = process.platform\n    }\n\n    if (platform === MACOS) {\n      return new SayMacos()\n    } else if (platform === LINUX) {\n      return new SayLinux()\n    } else if (platform === WIN32) {\n      return new SayWin32()\n    }\n\n    throw new Error(`new Say(): unsupported platorm! ${platform}`)\n  }\n}\n\nmodule.exports = new Say() // Create a singleton automatically for backwards compatability\nmodule.exports.Say = Say // Allow users to `say = new Say.Say(platform)`\nmodule.exports.platforms = {\n  WIN32: WIN32,\n  MACOS: MACOS,\n  LINUX: LINUX\n}\n","/**\n * Native speech module using the 'say' package\n * This module provides high-quality text-to-speech using the operating system's native speech engines:\n * - macOS: uses 'say' command and the native macOS voices\n * - Windows: uses SAPI voices\n * - Linux: uses speech-dispatcher\n */\nimport say from 'say';\nimport { ipcMain } from 'electron';\nimport path from 'path';\nimport fs from 'fs';\nimport os from 'os';\nimport { BrowserWindow } from 'electron';\n\n// Map to store voice information and settings\nlet voiceCache = [];\nlet speakingInstances = new Map(); // Track speaking instances by id\nlet nextSpeakId = 1;\n\n// List of \"prohibited\" words that may need special handling for profanity filters\nconst prohibitedWords = [\n  'fuck', 'shit', 'ass', 'damn', 'bastard', \n  'bitch', 'cunt', 'dick', 'cock', 'twat', 'prick'\n];\n\n// Custom profanity handler - returns modified text to bypass filters\nfunction bypassProfanityFilters(text) {\n  // Only do this processing if we're on macOS which has stricter filters\n  if (process.platform !== 'darwin') return text;\n  \n  let modifiedText = text;\n  \n  // Replace prohibited words with slight modifications that still sound similar\n  // when spoken but may bypass filters\n  prohibitedWords.forEach(word => {\n    // Create a regex that matches the word as a whole word\n    const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\n    \n    // Replace with various techniques:\n    // 1. Insert invisible character (zero-width space) between letters\n    // 2. Slightly alter spelling while maintaining pronunciation\n    if (regex.test(modifiedText)) {\n      // Choose a bypass method based on the word\n      switch(word) {\n        case 'fuck':\n          modifiedText = modifiedText.replace(regex, 'f\\u200Buck'); // Insert zero-width space\n          break;\n        case 'shit':\n          modifiedText = modifiedText.replace(regex, 'sh\\u200Bit'); // Insert zero-width space\n          break;\n        case 'ass':\n          modifiedText = modifiedText.replace(regex, 'a\\u200Bs'); // Insert zero-width space\n          break;\n        case 'damn':\n          modifiedText = modifiedText.replace(regex, 'd\\u200Bamn'); // Insert zero-width space\n          break;\n        case 'bitch':\n          modifiedText = modifiedText.replace(regex, 'b\\u200Bitch'); // Insert zero-width space\n          break;\n        default:\n          // Insert zero-width space in the middle for other words\n          const middleIndex = Math.floor(word.length / 2);\n          const modifiedWord = word.slice(0, middleIndex) + '\\u200B' + word.slice(middleIndex);\n          modifiedText = modifiedText.replace(regex, modifiedWord);\n      }\n    }\n  });\n  \n  return modifiedText;\n}\n\n// Process text for more natural speech\nfunction processTextForNaturalSpeech(text) {\n  let processedText = text;\n  \n  // Clean up and normalize whitespace\n  processedText = processedText.replace(/\\s+/g, ' ').trim();\n  \n  if (process.platform === 'darwin') {\n    // On macOS, we can use special markers that the 'say' command understands\n    // See: https://ss64.com/osx/say.html\n    \n    // Handle all-caps words by adding emphasis\n    processedText = processedText.replace(/\\b([A-Z]{2,})\\b/g, '[[emph +]]$1[[emph -]]');\n    \n    // Handle exclamation points by slightly raising pitch\n    processedText = processedText.replace(/([^!]+)(!+)/g, '$1[[rate +0.1]]$2[[rate -0.1]]');\n    \n    // Add slight emphasis to questions\n    processedText = processedText.replace(/([^?]+)(\\?+)/g, '$1[[inpt EMPH]]$2');\n    \n    // Process SSML-like markers that we allow in input:\n    // 1. [[emph +]] and [[emph -]] - already handled natively\n    // 2. [[rate +0.15]] and [[rate -0.15]] - already handled natively\n    \n    // For Windows or Linux, strip any SSML-like markers since they won't work there\n    if (process.platform !== 'darwin') {\n      processedText = processedText.replace(/\\[\\[.*?\\]\\]/g, '');\n    }\n  }\n  \n  return processedText;\n}\n\n// Initialize speech module\nfunction initSpeechModule() {\n  console.log('Initializing native speech module...');\n  \n  // Get available voices asynchronously\n  refreshVoiceCache();\n  \n  // Register IPC handlers for speech functions\n  ipcMain.handle('speech:getVoices', getVoices);\n  ipcMain.handle('speech:speak', (event, text, voice, rate, volume) => speak(text, voice, rate, volume));\n  ipcMain.handle('speech:stop', (event, id) => stop(id));\n  \n  console.log('Speech module initialized');\n}\n\n// Refresh the voice cache\nasync function refreshVoiceCache() {\n  return new Promise((resolve) => {\n    say.getInstalledVoices((err, voices) => {\n      if (err) {\n        console.error('Error getting installed voices:', err);\n        voiceCache = [];\n        resolve([]);\n        return;\n      }\n      \n      if (Array.isArray(voices)) {\n        console.log(`Found ${voices.length} voices`);\n        voiceCache = voices;\n      } else {\n        console.log('No voices found or voices are not in expected format');\n        console.log('Voices:', voices);\n        voiceCache = [];\n      }\n      \n      resolve(voiceCache);\n    });\n  });\n}\n\n// Get available voices\nasync function getVoices() {\n  if (voiceCache.length === 0) {\n    await refreshVoiceCache();\n  }\n  \n  // Return cached voices\n  return voiceCache;\n}\n\n// Speak text with specified voice and parameters\nasync function speak(text, voice, rate = 1.0, volume = 1.0) {\n  // Generate a unique ID for this speaking instance\n  const speakId = nextSpeakId++;\n  \n  try {\n    // Handle profanity to bypass filters - especially important on macOS\n    let processedText = bypassProfanityFilters(text);\n    \n    // Process text for natural-sounding speech with appropriate prosody\n    processedText = processTextForNaturalSpeech(processedText);\n    \n    // Create a promise to handle the speech completion\n    const speechPromise = new Promise((resolve, reject) => {\n      try {\n        // Calculate effective speed based on platform\n        // macOS 'say' command works better with values closer to 1.0\n        const speed = process.platform === 'darwin' \n          ? Math.min(Math.max(rate, 0.5), 2.0)        // Clamp between 0.5 and 2.0\n          : rate;\n        \n        // Start speaking\n        console.log(`Speaking with voice: ${voice}, rate: ${rate}, id: ${speakId}`);\n        \n        say.speak(processedText, voice, speed, (err) => {\n          if (err) {\n            console.error(`Error speaking (id: ${speakId}):`, err);\n            \n            // Send error event to renderer\n            for (const window of BrowserWindow.getAllWindows()) {\n              if (!window.isDestroyed()) {\n                window.webContents.send('speech:error', { id: speakId, error: err.toString() });\n              }\n            }\n            \n            reject(err);\n          } else {\n            console.log(`Speech completed (id: ${speakId})`);\n            \n            // Send completion event to renderer\n            for (const window of BrowserWindow.getAllWindows()) {\n              if (!window.isDestroyed()) {\n                window.webContents.send('speech:complete', { id: speakId });\n              }\n            }\n            \n            // Remove from active instances\n            if (speakingInstances.has(speakId)) {\n              speakingInstances.delete(speakId);\n            }\n            resolve();\n          }\n        });\n        \n        // Store this instance for potential stopping later\n        speakingInstances.set(speakId, { voice, text: processedText });\n        \n      } catch (error) {\n        console.error(`Exception in speech (id: ${speakId}):`, error);\n        reject(error);\n      }\n    });\n    \n    // Handle the promise internally instead of returning it\n    speechPromise.catch(error => {\n      console.error(`Speech promise rejected (id: ${speakId}):`, error);\n    });\n    \n    // Return just the speak ID so the client can stop it if needed\n    return { id: speakId, success: true };\n    \n  } catch (error) {\n    console.error('Error in speak function:', error);\n    return { id: -1, success: false, error: error.message };\n  }\n}\n\n// Stop speech\nfunction stop(id) {\n  try {\n    // If an ID is provided, stop only that instance\n    if (id && speakingInstances.has(id)) {\n      console.log(`Stopping speech with id: ${id}`);\n      speakingInstances.delete(id);\n    } \n    // Otherwise stop all speech\n    else {\n      console.log('Stopping all speech');\n      speakingInstances.clear();\n    }\n    \n    // Stop any ongoing speech\n    say.stop();\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error stopping speech:', error);\n    return { success: false, error: error.message };\n  }\n}\n\n// Cleanup function to be called when app is closing\nfunction cleanup() {\n  // Stop any active speech\n  say.stop();\n  speakingInstances.clear();\n  \n  // Remove IPC handlers\n  ipcMain.removeHandler('speech:getVoices');\n  ipcMain.removeHandler('speech:speak');\n  ipcMain.removeHandler('speech:stop');\n}\n\n// Export functions\nexport {\n  initSpeechModule,\n  cleanup,\n  getVoices,\n  speak,\n  stop\n}; ","import { app, BrowserWindow, ipcMain, screen, globalShortcut } from 'electron';\nimport * as path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Import our speech module\nimport { initSpeechModule, cleanup as cleanupSpeech } from './speech/speechModule.mjs';\n\n// In ES modules, we need to recreate __dirname and __filename\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nprocess.env.DIST = path.join(__dirname, '../dist');\nprocess.env.VITE_PUBLIC = app.isPackaged \n  ? process.env.DIST\n  : path.join(__dirname, '../public');\n\n// Store references to all windows\nconst windows: BrowserWindow[] = [];\n\n// Map to track which window belongs to which display\nconst displayWindowMap = new Map<number, BrowserWindow>();\n\n// Create a variable to hold the interval ID\nlet stayOnTopInterval: NodeJS.Timeout | null = null;\n\n// Add display-related events to handle monitors being added/removed\nlet autoCreateWindowsForNewDisplays = true;\n\n// Create a window for each display\nfunction createWindows() {\n  // Get all displays\n  const displays = screen.getAllDisplays();\n  console.log(`Found ${displays.length} displays`);\n  \n  // Create a window for each display\n  for (const display of displays) {\n    console.log(`Creating window for display: ${display.id}`, {\n      bounds: display.bounds,\n      workArea: display.workArea\n    });\n    \n    // Create the window with macOS-specific settings\n    const win = new BrowserWindow({\n      x: display.bounds.x,\n      y: display.bounds.y,\n      width: display.bounds.width,\n      height: display.bounds.height,\n      webPreferences: {\n        preload: path.join(__dirname, 'preload.js'),\n        nodeIntegration: false,\n        contextIsolation: true,\n        backgroundThrottling: false,\n      },\n      // Make the window transparent\n      transparent: true,\n      backgroundColor: '#00000000', // Fully transparent\n      frame: false,\n      skipTaskbar: true,\n      hasShadow: false,\n      titleBarStyle: 'hidden',\n      titleBarOverlay: false,\n      fullscreen: false,\n      // Don't use simpleFullscreen as it can create issues on macOS\n      simpleFullscreen: false,\n      // Set to floating window type on macOS\n      type: 'panel', // Important for macOS transparency\n      // Remove vibrancy - it can cause transparency issues\n      vibrancy: null as any,\n      visualEffectState: null as any,\n      // Ensure the window accepts focus when needed\n      focusable: true,\n      // Always stay on top of other windows\n      alwaysOnTop: true\n    });\n\n    // Set specific window properties for macOS\n    if (process.platform === 'darwin') {\n      win.setWindowButtonVisibility(false);\n      // Use level 'floating' for macOS to keep window above others\n      win.setAlwaysOnTop(true, 'screen-saver', 1); // Use screen-saver level which is higher than floating\n      \n      // Additional macOS configuration to ensure transparency\n      win.setBackgroundColor('#00000000');\n      \n      // On macOS, we need to set opacity to ensure transparency\n      win.setOpacity(1.0);\n    } else if (process.platform === 'win32') {\n      // For Windows, set a more aggressive always-on-top level\n      win.setAlwaysOnTop(true, 'screen-saver');\n    } else {\n      // For Linux and other platforms\n      win.setAlwaysOnTop(true);\n    }\n\n    // Start with click-through enabled\n    win.setIgnoreMouseEvents(true, { forward: true });\n    \n    // Set window title to reflect click-through state\n    win.setTitle('Speedforge (click-through:true)');\n    \n    // Load the app\n    const mainUrl = process.env.VITE_DEV_SERVER_URL || `file://${path.join(process.env.DIST, 'index.html')}`;\n    win.loadURL(mainUrl);\n    \n    // Store the window reference\n    windows.push(win);\n    \n    // Map this window to its display ID\n    displayWindowMap.set(display.id, win);\n    \n    // Store the display ID in the window's metadata for reference\n    (win as any).displayId = display.id;\n    \n    // Log when window is ready\n    win.webContents.on('did-finish-load', () => {\n      console.log(`Window for display ${display.id} is ready`);\n      \n      // Send display ID to the renderer process\n      win.webContents.send('display:id', display.id);\n      \n      // For macOS, make sure we're the right size after loading\n      if (process.platform === 'darwin') {\n        win.setBounds({\n          x: display.bounds.x,\n          y: display.bounds.y,\n          width: display.bounds.width,\n          height: display.bounds.height\n        });\n        \n        // Force an opacity update to ensure transparency\n        win.setOpacity(0.99);\n        setTimeout(() => win.setOpacity(1.0), 100);\n      }\n    });\n    \n    // Open DevTools for primary display in dev mode (as a separate window)\n    if (process.env.VITE_DEV_SERVER_URL && display.id === screen.getPrimaryDisplay().id) {\n      win.webContents.openDevTools({ mode: 'detach' });\n    }\n  }\n}\n\n// Function to close a specific window by display ID\nfunction closeWindowForDisplay(displayId: number): boolean {\n  console.log(`Attempting to close window for display ID: ${displayId}`);\n  \n  // Get the window for this display\n  const win = displayWindowMap.get(displayId);\n  \n  if (!win) {\n    console.log(`No window found for display ID: ${displayId}`);\n    return false;\n  }\n  \n  try {\n    if (!win.isDestroyed()) {\n      console.log(`Closing window for display ID: ${displayId}`);\n      \n      // Remove all listeners to prevent memory leaks\n      win.removeAllListeners();\n      \n      // Ensure the window can be closed\n      win.setClosable(true);\n      \n      // Hide the window immediately\n      win.hide();\n      \n      // Set to null to help garbage collection\n      win.webContents.setDevToolsWebContents(null);\n      \n      // Force close the window\n      win.close();\n      \n      // Explicitly destroy the window\n      win.destroy();\n      \n      // Remove from our tracking maps\n      displayWindowMap.delete(displayId);\n      const windowIndex = windows.indexOf(win);\n      if (windowIndex >= 0) {\n        windows.splice(windowIndex, 1);\n      }\n      \n      console.log(`Successfully closed and destroyed window for display ID: ${displayId}`);\n      return true;\n    } else {\n      console.log(`Window for display ID: ${displayId} was already destroyed`);\n      \n      // Clean up tracking even if window was already destroyed\n      displayWindowMap.delete(displayId);\n      const windowIndex = windows.indexOf(win);\n      if (windowIndex >= 0) {\n        windows.splice(windowIndex, 1);\n      }\n      \n      return true;\n    }\n  } catch (error) {\n    console.error(`Error closing window for display ID: ${displayId}`, error);\n    \n    // Try to clean up tracking even if there was an error\n    displayWindowMap.delete(displayId);\n    const windowIndex = windows.indexOf(win);\n    if (windowIndex >= 0) {\n      windows.splice(windowIndex, 1);\n    }\n  }\n  \n  return false;\n}\n\n// Setup basic IPC listeners\nfunction setupIpcListeners() {\n  // Quit the application\n  ipcMain.handle('app:quit', () => {\n    console.log('Quitting application');\n    try {\n      // Try to close all windows first\n      for (const win of windows) {\n        if (!win.isDestroyed()) {\n          win.close();\n        }\n      }\n      \n      // Clear out the windows array\n      windows.length = 0;\n      \n      // Schedule app quit to happen after current event loop\n      setTimeout(() => {\n        try {\n          app.quit();\n        } catch (error) {\n          console.log('Error during app.quit():', error);\n          // Force exit as a last resort\n          process.exit(0);\n        }\n      }, 100);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error during quit process:', error);\n      // Force exit as a last resort\n      process.exit(0);\n      return { success: false, error: String(error) };\n    }\n  });\n  \n  // Toggle auto-create windows for new displays\n  ipcMain.handle('app:toggleAutoNewWindows', (event, state) => {\n    console.log(`Toggling auto-create new windows for displays from main process to: ${state}`);\n    autoCreateWindowsForNewDisplays = state;\n    return { success: true, state };\n  });\n  \n  // Toggle click-through mode\n  ipcMain.handle('app:toggleClickThrough', (event, state) => {\n    console.log(`Toggling click-through from main process to: ${state}`);\n    \n    // Get the window that sent this request\n    const win = BrowserWindow.fromWebContents(event.sender);\n    if (!win) {\n      console.error('Could not find window associated with this request');\n      return { success: false, error: 'Window not found' };\n    }\n    \n    try {\n      // When we set ignore mouse events, we can choose to forward specific elements\n      if (state === true) {\n        // Enable click-through but forward clicks on specific UI elements\n        // The 'forward' option in Electron 13+ only accepts boolean values\n        // We'll use true to forward all events to the web contents\n        console.log('Setting ignore mouse events with forwarding');\n        \n        // Important: Only ignore mouse events, not keyboard events\n        // This ensures that keyboard shortcuts like ESC still work when click-through is active\n        win.setIgnoreMouseEvents(true, { forward: true });\n        \n        // Ensure the window can still receive keyboard focus - needed for ESC key\n        win.focusOnWebView();\n        \n        // Ensure the window stays on top with the highest level\n        if (process.platform === 'darwin') {\n          win.setAlwaysOnTop(true, 'screen-saver', 1);\n        } else if (process.platform === 'win32') {\n          win.setAlwaysOnTop(true, 'screen-saver');\n        } else {\n          win.setAlwaysOnTop(true);\n        }\n        \n        // Using pointer-events CSS in the renderer will control which elements receive clicks\n        // This approach allows renderer to decide which elements should get mouse events\n        console.log('Click-through enabled with forwarding. UI controls use CSS to handle clicks.');\n      } else {\n        // Disable click-through completely\n        console.log('Disabling ignore mouse events');\n        win.setIgnoreMouseEvents(false);\n        \n        // Make sure window still stays on top with the highest level\n        if (process.platform === 'darwin') {\n          win.setAlwaysOnTop(true, 'screen-saver', 1);\n        } else if (process.platform === 'win32') {\n          win.setAlwaysOnTop(true, 'screen-saver');\n        } else {\n          win.setAlwaysOnTop(true);\n        }\n        \n        console.log('Click-through disabled');\n      }\n      \n      const response = { success: true, state };\n      console.log('Returning response:', response);\n      return response;\n    } catch (error) {\n      console.error('Error toggling click-through:', error);\n      const errorResponse = { success: false, error: String(error) };\n      console.log('Returning error response:', errorResponse);\n      return errorResponse;\n    }\n  });\n  \n  // New handler to close a specific window by display ID\n  ipcMain.handle('app:closeWindowForDisplay', (event, displayId) => {\n    console.log(`Received request to close window for display ID: ${displayId}`);\n    \n    // Get the display ID of the window making the request if no ID was provided\n    if (displayId === undefined) {\n      const win = BrowserWindow.fromWebContents(event.sender);\n      if (win) {\n        displayId = (win as any).displayId;\n      }\n    }\n    \n    if (displayId === undefined) {\n      return { success: false, error: 'No display ID provided or found' };\n    }\n    \n    const success = closeWindowForDisplay(displayId);\n    return { success };\n  });\n  \n  // New handler to get all displays\n  ipcMain.handle('app:getDisplays', () => {\n    try {\n      const displays = screen.getAllDisplays();\n      const primaryDisplay = screen.getPrimaryDisplay();\n      \n      // Create a simplified display info object\n      const displayInfo = displays.map(display => ({\n        id: display.id,\n        bounds: display.bounds,\n        workArea: display.workArea,\n        isPrimary: display.id === primaryDisplay.id,\n        scaleFactor: display.scaleFactor,\n        rotation: display.rotation,\n        size: display.size,\n        label: display.label || `Display ${display.id}`\n      }));\n      \n      return { success: true, displays: displayInfo };\n    } catch (error) {\n      console.error('Error getting displays:', error);\n      return { success: false, error: String(error) };\n    }\n  });\n  \n  // New handler to get current window's display ID\n  ipcMain.handle('app:getCurrentDisplayId', (event) => {\n    try {\n      const win = BrowserWindow.fromWebContents(event.sender);\n      if (win) {\n        const displayId = (win as any).displayId;\n        return { success: true, displayId };\n      }\n      return { success: false, error: 'No window found for web contents' };\n    } catch (error) {\n      console.error('Error getting current display ID:', error);\n      return { success: false, error: String(error) };\n    }\n  });\n}\n\n// Clean up when all windows are closed\napp.on('window-all-closed', () => {\n  // Unregister global shortcuts\n  globalShortcut.unregisterAll();\n  \n  if (process.platform !== 'darwin') app.quit();\n});\n\n// Re-create windows if activated and no windows exist\napp.on('activate', () => {\n  if (windows.length === 0) createWindows();\n});\n\n// Clean up before quitting\napp.on('before-quit', () => {\n  console.log('Performing cleanup before quit');\n  \n  // Clear the stay-on-top interval\n  if (stayOnTopInterval) {\n    clearInterval(stayOnTopInterval);\n    stayOnTopInterval = null;\n  }\n  \n  // Unregister global shortcuts\n  globalShortcut.unregisterAll();\n  \n  // Remove all IPC handlers\n  ipcMain.removeHandler('app:quit');\n  ipcMain.removeHandler('app:toggleAutoNewWindows');\n  ipcMain.removeHandler('app:toggleClickThrough');\n  ipcMain.removeHandler('app:closeWindowForDisplay');\n  ipcMain.removeHandler('app:getDisplays');\n  ipcMain.removeHandler('app:getCurrentDisplayId');\n  \n  // Clean up speech module\n  cleanupSpeech();\n  \n  // Close windows gracefully\n  for (const win of windows) {\n    try {\n      if (!win.isDestroyed()) {\n        win.removeAllListeners();\n        win.setClosable(true);\n        win.close();\n      }\n    } catch (error) {\n      console.error('Error closing window:', error);\n    }\n  }\n  \n  // Clear windows array\n  windows.length = 0;\n});\n\n// When Electron is ready\napp.whenReady().then(() => {\n  // Set application name for process manager\n  app.setName('Speedforge');\n  \n  // Initialize the speech module\n  initSpeechModule();\n  \n  createWindows();\n  setupIpcListeners();\n  \n  // Set up an interval to periodically ensure all windows stay on top\n  stayOnTopInterval = setInterval(() => {\n    for (const win of windows) {\n      if (!win.isDestroyed()) {\n        if (process.platform === 'darwin') {\n          win.setAlwaysOnTop(true, 'screen-saver', 1);\n        } else if (process.platform === 'win32') {\n          win.setAlwaysOnTop(true, 'screen-saver');\n        } else {\n          win.setAlwaysOnTop(true);\n        }\n      }\n    }\n  }, 1000); // Check every second\n  \n  // Register global shortcut for Ctrl+Space to toggle click-through\n  globalShortcut.register('CommandOrControl+Space', () => {\n    console.log('Global Ctrl+Space shortcut triggered');\n    \n    // Toggle click-through for all windows\n    for (const win of windows) {\n      // Get current click-through state from window\n      const isCurrentlyClickThrough = win.getTitle().includes('click-through:true');\n      const newState = !isCurrentlyClickThrough;\n      \n      console.log(`Global shortcut toggling click-through from ${isCurrentlyClickThrough} to ${newState}`);\n      \n      // Send message to renderer\n      win.webContents.send('app:toggle-click-through', newState);\n      \n      // Update window title with state for tracking\n      win.setTitle(`Speedforge (click-through:${newState})`);\n    }\n  });\n  \n  // Setup screen event listeners now that the app is ready\n  screen.on('display-added', (event, display) => {\n    console.log('New display detected:', display);\n    \n    // Only create window if auto-create is enabled\n    if (!autoCreateWindowsForNewDisplays) {\n      console.log('Auto-create new windows is disabled, skipping window creation for new display');\n      return;\n    }\n    \n    // Create a window for the newly added display\n    const win = new BrowserWindow({\n      x: display.bounds.x,\n      y: display.bounds.y,\n      width: display.bounds.width,\n      height: display.bounds.height,\n      webPreferences: {\n        preload: path.join(__dirname, 'preload.js'),\n        nodeIntegration: false,\n        contextIsolation: true,\n        backgroundThrottling: false,\n      },\n      transparent: true,\n      backgroundColor: '#00000000',\n      frame: false,\n      skipTaskbar: true,\n      hasShadow: false,\n      titleBarStyle: 'hidden',\n      titleBarOverlay: false,\n      fullscreen: false,\n      type: 'panel',\n      vibrancy: null as any,\n      visualEffectState: null as any,\n      focusable: true,\n      alwaysOnTop: true\n    });\n\n    // Set platform-specific settings\n    if (process.platform === 'darwin') {\n      win.setWindowButtonVisibility(false);\n      win.setAlwaysOnTop(true, 'screen-saver', 1);\n      win.setBackgroundColor('#00000000');\n      win.setOpacity(1.0);\n    } else if (process.platform === 'win32') {\n      win.setAlwaysOnTop(true, 'screen-saver');\n    } else {\n      win.setAlwaysOnTop(true);\n    }\n\n    // Start with click-through enabled\n    win.setIgnoreMouseEvents(true, { forward: true });\n    win.setTitle('Speedforge (click-through:true)');\n    \n    // Load the app\n    const mainUrl = process.env.VITE_DEV_SERVER_URL || `file://${path.join(process.env.DIST, 'index.html')}`;\n    win.loadURL(mainUrl);\n    \n    // Store the window reference\n    windows.push(win);\n    \n    // Map this window to its display ID\n    displayWindowMap.set(display.id, win);\n    \n    // Store the display ID in the window's metadata for reference\n    (win as any).displayId = display.id;\n    \n    console.log(`Created new window for display ${display.id}`);\n  });\n\n  screen.on('display-removed', (event, display) => {\n    console.log('Display removed:', display);\n    \n    // Get window before attempting to close it\n    const win = displayWindowMap.get(display.id);\n    \n    // Close the window associated with this display\n    const result = closeWindowForDisplay(display.id);\n    console.log(`Window for removed display ${display.id} was ${result ? 'closed' : 'not found or could not be closed'}`);\n    \n    // Force additional cleanup if the window was found but not properly closed\n    if (!result && win && !win.isDestroyed()) {\n      console.log(`Forcing additional cleanup for display ${display.id}`);\n      try {\n        win.removeAllListeners();\n        win.hide();\n        win.destroy();\n        \n        // Clean up tracking maps\n        displayWindowMap.delete(display.id);\n        const windowIndex = windows.indexOf(win);\n        if (windowIndex >= 0) {\n          windows.splice(windowIndex, 1);\n        }\n      } catch (cleanupError) {\n        console.error(`Error during forced cleanup for display ${display.id}:`, cleanupError);\n      }\n    }\n    \n    // Verify cleanup was successful\n    if (displayWindowMap.has(display.id)) {\n      console.warn(`Window for display ${display.id} is still in displayWindowMap after cleanup attempt`);\n      displayWindowMap.delete(display.id);\n    }\n  });\n  \n  // Log display information for debugging\n  const displays = screen.getAllDisplays();\n  const primary = screen.getPrimaryDisplay();\n  console.log('Primary display:', primary);\n  console.log('All displays:', displays);\n});\n"],"names":["require$$1","require$$0","require$$2","sayModule","cleanupSpeech"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}
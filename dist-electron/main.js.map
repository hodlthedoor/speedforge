{"version":3,"file":"main.js","sources":["../electron/WidgetWindow.ts","../electron/main.ts"],"sourcesContent":["import { BrowserWindow, BrowserWindowConstructorOptions, app, ipcMain } from 'electron';\nimport * as path from 'path';\nimport { fileURLToPath } from 'url';\n\n// In ES modules, we need to recreate __dirname and __filename\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport interface WidgetWindowOptions {\n  widgetId: string;\n  widgetType: string;\n  width?: number;\n  height?: number;\n  x?: number;\n  y?: number;\n  alwaysOnTop?: boolean;\n  params?: Record<string, any>;\n}\n\nexport class WidgetWindowManager {\n  private windows: Map<string, BrowserWindow> = new Map();\n  \n  constructor(private mainUrl: string) {}\n\n  createWidgetWindow(options: WidgetWindowOptions): BrowserWindow {\n    const { widgetId, widgetType, width = 300, height = 200, x, y, alwaysOnTop = false, params = {} } = options;\n    \n    // Check if window already exists\n    if (this.windows.has(widgetId)) {\n      const existingWindow = this.windows.get(widgetId);\n      existingWindow?.focus();\n      return existingWindow as BrowserWindow;\n    }\n    \n    // Create window with frame: false for frameless window\n    const win = new BrowserWindow({\n      width,\n      height,\n      x,\n      y,\n      frame: false,                   // No window frame\n      transparent: true,              // Transparent background\n      backgroundColor: '#1f2937',     // Match the dark background color\n      webPreferences: {\n        preload: path.join(__dirname, 'preload.js'),\n        nodeIntegration: false,\n        contextIsolation: true,\n        webSecurity: false,            // Allow loading of local resources\n        scrollBounce: false,           // Improves scrollbar behavior\n        backgroundThrottling: true,    // Allow background throttling to reduce CPU/GPU usage\n        disableHtmlFullscreenWindowResize: true, // Disable unnecessary resize events\n        devTools: process.env.NODE_ENV === 'development', // Only enable devtools in dev mode\n      },\n      alwaysOnTop,\n      skipTaskbar: true,\n      movable: true,                  // Allow window to be moved\n      resizable: false,               // Not resizable as requested\n      hasShadow: false,               // No shadow\n      autoHideMenuBar: true,          // Hide the menu bar\n      titleBarStyle: 'hidden',        // Hidden title bar for cleaner look\n      titleBarOverlay: false,\n      thickFrame: false,              // Thin frame\n      vibrancy: null,\n      visualEffectState: null,\n      fullscreenable: false,\n      show: false,                    // Don't show until ready-to-show\n    });\n    \n    // Show window once ready\n    win.once('ready-to-show', () => {\n      // Hide the standard window controls on macOS (traffic lights)\n      if (process.platform === 'darwin') {\n        // Set the window to have no title bar\n        win.setWindowButtonVisibility(false);\n      }\n      \n      win.show();\n    });\n    \n    // Inject CSS to hide scrollbars when window content is loaded\n    win.webContents.on('did-finish-load', () => {\n      win.webContents.insertCSS(`\n        html, body {\n          overflow: hidden !important;\n        }\n        ::-webkit-scrollbar {\n          display: none !important;\n        }\n        * {\n          -ms-overflow-style: none !important;\n          scrollbar-width: none !important;\n        }\n      `);\n    });\n    \n    // Add window to tracking\n    this.windows.set(widgetId, win);\n    \n    // Build the URL with query parameters for the widget\n    const queryParams = new URLSearchParams();\n    queryParams.append('widgetId', widgetId);\n    queryParams.append('widgetType', widgetType);\n    \n    // Add any additional parameters\n    Object.entries(params).forEach(([key, value]) => {\n      queryParams.append(key, String(value));\n      console.log(`Setting param for widget ${widgetId}: ${key}=${value}`);\n    });\n    \n    // Load the widget URL - use a direct approach to ensure parameters are passed correctly\n    const widgetUrl = `${this.mainUrl}?${queryParams.toString()}#/widget`;\n    console.log('Loading widget URL:', widgetUrl);\n    console.log('Widget parameters:', { widgetId, widgetType, params });\n    win.loadURL(widgetUrl);\n    \n    // Handle window closed event\n    win.on('closed', () => {\n      this.windows.delete(widgetId);\n      // Remove from any tracking maps in main.ts\n      ipcMain.emit('widget:closed', {}, options.widgetId);\n    });\n    \n    // Prevent new windows from opening\n    win.webContents.setWindowOpenHandler(() => {\n      return { action: 'deny' };\n    });\n    \n    return win;\n  }\n  \n  closeWidgetWindow(widgetId: string): boolean {\n    const win = this.windows.get(widgetId);\n    if (win && !win.isDestroyed()) {\n      win.close();\n      return true;\n    }\n    return false;\n  }\n  \n  getWidgetWindow(widgetId: string): BrowserWindow | undefined {\n    return this.windows.get(widgetId);\n  }\n  \n  getAllWidgetWindows(): Map<string, BrowserWindow> {\n    return this.windows;\n  }\n  \n  setWidgetPosition(widgetId: string, x: number, y: number): boolean {\n    const win = this.windows.get(widgetId);\n    if (win && !win.isDestroyed()) {\n      win.setPosition(x, y);\n      return true;\n    }\n    return false;\n  }\n  \n  setWidgetSize(widgetId: string, width: number, height: number): boolean {\n    const win = this.windows.get(widgetId);\n    if (win && !win.isDestroyed()) {\n      win.setSize(width, height);\n      return true;\n    }\n    return false;\n  }\n  \n  setWidgetAlwaysOnTop(widgetId: string, alwaysOnTop: boolean): boolean {\n    const win = this.windows.get(widgetId);\n    if (win && !win.isDestroyed()) {\n      win.setAlwaysOnTop(alwaysOnTop);\n      return true;\n    }\n    return false;\n  }\n  \n  setWidgetOpacity(widgetId: string, opacity: number): boolean {\n    const win = this.windows.get(widgetId);\n    if (win && !win.isDestroyed()) {\n      // Set the entire window's opacity directly\n      win.setOpacity(opacity);\n      \n      // Also notify the renderer process to maintain state consistency\n      win.webContents.send('widget:opacity', opacity);\n      return true;\n    }\n    return false;\n  }\n  \n  setWidgetVisible(widgetId: string, visible: boolean): boolean {\n    const win = this.windows.get(widgetId);\n    if (win && !win.isDestroyed()) {\n      if (visible) {\n        win.show();\n      } else {\n        win.hide();\n      }\n      return true;\n    }\n    return false;\n  }\n  \n  // Update widget parameters by reloading the window with new URL parameters\n  updateWidgetParams(widgetId: string, params: Record<string, any>): boolean {\n    const win = this.windows.get(widgetId);\n    if (win && !win.isDestroyed()) {\n      // Build URL with new parameters\n      const currentUrl = new URL(win.webContents.getURL());\n      const searchParams = new URLSearchParams(currentUrl.search);\n      \n      // Add/update parameters\n      Object.entries(params).forEach(([key, value]) => {\n        searchParams.set(key, String(value));\n        console.log(`Setting param for widget ${widgetId}: ${key}=${value}`);\n      });\n      \n      // Create new URL with updated parameters\n      const newUrl = `${this.mainUrl}?${searchParams.toString()}#/widget`;\n      console.log(`Reloading widget ${widgetId} with URL:`, newUrl);\n      \n      // Reload window with new URL\n      win.loadURL(newUrl);\n      \n      return true;\n    }\n    return false;\n  }\n} ","import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent } from 'electron';\nimport * as path from 'path';\nimport { fileURLToPath } from 'url';\nimport { WidgetWindowManager, WidgetWindowOptions } from './WidgetWindow';\n\n// In ES modules, we need to recreate __dirname and __filename\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nprocess.env.DIST = path.join(__dirname, '../dist');\nprocess.env.VITE_PUBLIC = app.isPackaged \n  ? process.env.DIST\n  : path.join(__dirname, '../public');\n\nlet mainWindow: BrowserWindow | null = null;\nlet widgetManager: WidgetWindowManager;\n// Store telemetry data and connection status in the main process\nlet telemetryData: any = null;\nlet telemetryConnected: boolean = false;\n\n// Track registered widget windows\nconst widgetWindowHandlers: Map<string, BrowserWindow> = new Map();\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({\n    width: 1000,\n    height: 700,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js'),\n      nodeIntegration: false,\n      contextIsolation: true,\n      webSecurity: false,\n      scrollBounce: false\n    },\n    // Standard window with controls\n    frame: true,\n    transparent: false,\n    titleBarStyle: 'default'\n  });\n\n  // Test active push message to Renderer\n  mainWindow.webContents.on('did-finish-load', () => {\n    mainWindow?.webContents.send('main-process-message', new Date().toLocaleString());\n  });\n\n  const mainUrl = process.env.VITE_DEV_SERVER_URL || `file://${path.join(process.env.DIST, 'index.html')}`;\n  mainWindow.loadURL(mainUrl);\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    mainWindow.webContents.openDevTools();\n  }\n  \n  // Create Widget Manager\n  widgetManager = new WidgetWindowManager(mainUrl);\n  \n  // Set up IPC listeners for widget operations\n  setupIpcListeners();\n}\n\nfunction setupIpcListeners() {\n  // Create a new widget window\n  ipcMain.handle('widget:create', (_, options: WidgetWindowOptions) => {\n    try {\n      const window = widgetManager.createWidgetWindow(options);\n      \n      // Register the window with its widgetId\n      widgetWindowHandlers.set(options.widgetId, window);\n      \n      // Listen for window closed event to unregister\n      window.on('closed', () => {\n        widgetWindowHandlers.delete(options.widgetId);\n      });\n      \n      return { success: true, id: options.widgetId };\n    } catch (error: any) {\n      console.error('Error creating widget window:', error);\n      return { success: false, error: error.message };\n    }\n  });\n  \n  // Close a widget window\n  ipcMain.handle('widget:close', (_, widgetId: string) => {\n    // Remove from handlers when closing\n    widgetWindowHandlers.delete(widgetId);\n    const success = widgetManager.closeWidgetWindow(widgetId);\n    return { success };\n  });\n  \n  // Get all widget windows\n  ipcMain.handle('widget:getAll', () => {\n    const widgets = Array.from(widgetManager.getAllWidgetWindows().keys());\n    return { success: true, widgets };\n  });\n  \n  // Set widget position\n  ipcMain.handle('widget:setPosition', (_, { widgetId, x, y }: { widgetId: string, x: number, y: number }) => {\n    const success = widgetManager.setWidgetPosition(widgetId, x, y);\n    return { success };\n  });\n  \n  // Set widget size\n  ipcMain.handle('widget:setSize', (_, { widgetId, width, height }: { widgetId: string, width: number, height: number }) => {\n    const success = widgetManager.setWidgetSize(widgetId, width, height);\n    return { success };\n  });\n  \n  // Set widget always-on-top status\n  ipcMain.handle('widget:setAlwaysOnTop', (_, { widgetId, alwaysOnTop }: { widgetId: string, alwaysOnTop: boolean }) => {\n    const success = widgetManager.setWidgetAlwaysOnTop(widgetId, alwaysOnTop);\n    return { success };\n  });\n  \n  // Set widget opacity\n  ipcMain.handle('widget:setOpacity', (_, { widgetId, opacity }: { widgetId: string, opacity: number }) => {\n    const success = widgetManager.setWidgetOpacity(widgetId, opacity);\n    return { success };\n  });\n  \n  // Set widget visibility\n  ipcMain.handle('widget:setVisible', (_, { widgetId, visible }: { widgetId: string, visible: boolean }) => {\n    const success = widgetManager.setWidgetVisible(widgetId, visible);\n    return { success };\n  });\n  \n  // Update widget parameters\n  ipcMain.handle('widget:updateParams', (_, { widgetId, params }: { widgetId: string, params: Record<string, any> }) => {\n    console.log(`Main process received updateParams request for widget ${widgetId}:`, params);\n    \n    // Use the new method to reload the widget with updated parameters\n    if (widgetManager.updateWidgetParams(widgetId, params)) {\n      return { success: true };\n    } else {\n      return { success: false, error: 'Failed to update widget parameters' };\n    }\n  });\n  \n  // Handler for telemetry data requests\n  ipcMain.handle('telemetry:getData', (event) => {\n    return telemetryData;\n  });\n  \n  // Handler for connection status requests\n  ipcMain.handle('telemetry:getConnectionStatus', (event) => {\n    return telemetryConnected;\n  });\n  \n  // Listen for telemetry updates from the renderer process\n  ipcMain.on('telemetry:update', (_, data) => {\n    // Store the data for future requests (make a shallow copy to avoid reference issues)\n    telemetryData = { ...data };\n    telemetryConnected = true;\n    \n    // Only broadcast updates if we have widgets to send to\n    const windows = widgetManager.getAllWidgetWindows();\n    if (windows.size > 0 || widgetWindowHandlers.size > 0) {\n      broadcastToAllWidgets('telemetry:update', telemetryData);\n    }\n  });\n  \n  // Listen for connection status changes\n  ipcMain.on('telemetry:connectionChange', (_, connected) => {\n    // Store the status for future requests\n    telemetryConnected = connected;\n    \n    // Only broadcast updates if we have widgets to send to\n    const windows = widgetManager.getAllWidgetWindows();\n    if (windows.size > 0 || widgetWindowHandlers.size > 0) {\n      broadcastToAllWidgets('telemetry:connectionChange', connected);\n    }\n  });\n  \n  // Handle Escape key to close widgets\n  ipcMain.on('widget:closeByEscape', (event) => {\n    const win = BrowserWindow.fromWebContents(event.sender);\n    if (win) {\n      win.close();\n    }\n  });\n\n  // Listen for explicit widget registration for updates\n  ipcMain.on('widget:registerForUpdates', (event, { widgetId }) => {\n    const sender = BrowserWindow.fromWebContents(event.sender);\n    if (!sender) {\n      return;\n    }\n    \n    // Store in our tracking map\n    widgetWindowHandlers.set(widgetId, sender);\n    \n    // Send current data immediately if available\n    if (telemetryData) {\n      try {\n        sender.webContents.send('telemetry:update', telemetryData);\n      } catch (error) {\n        console.error(`Failed to send initial data to widget ${widgetId}:`, error);\n      }\n    }\n    \n    // Send current connection status\n    try {\n      sender.webContents.send('telemetry:connectionChange', true);\n    } catch (error) {\n      console.error(`Failed to send connection status to widget ${widgetId}:`, error);\n    }\n  });\n\n  // Listen for widget closure events to clean up resources\n  ipcMain.on('widget:closed', (_, widgetId) => {\n    // Remove from our tracking map\n    if (widgetWindowHandlers.has(widgetId)) {\n      widgetWindowHandlers.delete(widgetId);\n    }\n  });\n}\n\n// Helper function to broadcast a message to all widget windows\nfunction broadcastToAllWidgets(channel: string, data: any) {\n  // Use a Set to keep track of which windows we've already messaged\n  // to avoid sending duplicate messages\n  const messaged = new Set<string>();\n  \n  // First, let's check if there are any windows to broadcast to\n  const windows = widgetManager.getAllWidgetWindows();\n  if (windows.size === 0 && widgetWindowHandlers.size === 0) {\n    return; // No windows to broadcast to\n  }\n  \n  // First broadcast to all windows from the widget manager\n  for (const [widgetId, window] of windows.entries()) {\n    if (!window.isDestroyed()) {\n      try {\n        window.webContents.send(channel, data);\n        messaged.add(widgetId);\n      } catch (error) {\n        console.error(`Failed to send ${channel} to widget ${widgetId}:`, error);\n      }\n    }\n  }\n  \n  // Also broadcast to any window in our explicit handler map that might not be in the widget manager\n  for (const [widgetId, window] of widgetWindowHandlers.entries()) {\n    // Skip if we've already messaged this window or if it's destroyed\n    if (messaged.has(widgetId) || window.isDestroyed()) {\n      if (window.isDestroyed()) {\n        widgetWindowHandlers.delete(widgetId);\n      }\n      continue;\n    }\n    \n    try {\n      window.webContents.send(channel, data);\n    } catch (error) {\n      console.error(`Failed to send ${channel} to widget ${widgetId}:`, error);\n      // Clean up references to destroyed windows\n      widgetWindowHandlers.delete(widgetId);\n    }\n  }\n}\n\napp.whenReady().then(() => {\n  createWindow();\n  setupMemoryManagement();\n});\n\n// Memory management function to reduce memory usage\nfunction setupMemoryManagement() {\n  // Periodically clean up references and force garbage collection\n  setInterval(() => {\n    // Clean up any destroyed windows from our handler map\n    for (const [widgetId, window] of widgetWindowHandlers.entries()) {\n      if (window.isDestroyed()) {\n        widgetWindowHandlers.delete(widgetId);\n      }\n    }\n    \n    // Check for memory usage\n    const memoryInfo = process.memoryUsage();\n    const memoryUsageMB = Math.round(memoryInfo.heapUsed / 1024 / 1024);\n    \n    // If memory usage is high, try to free up resources\n    if (memoryUsageMB > 500) { // 500MB threshold\n      telemetryData = null; // Clear cached data\n      \n      // Force garbage collection if available (only in dev mode with --expose-gc flag)\n      if (global.gc) {\n        global.gc();\n      }\n    }\n  }, 30000); // Run every 30 seconds\n}\n\n// Add a 'before-quit' handler to ensure all widgets are closed properly\napp.on('before-quit', () => {\n  console.log('Application is shutting down, closing all widgets...');\n  // Close all open widget windows to prevent orphaned processes\n  if (widgetManager) {\n    const windows = widgetManager.getAllWidgetWindows();\n    for (const [widgetId, window] of windows.entries()) {\n      if (!window.isDestroyed()) {\n        console.log(`Closing widget: ${widgetId}`);\n        window.close();\n      }\n    }\n  }\n  \n  // Clear the handlers map\n  widgetWindowHandlers.clear();\n  \n  // Clean up all IPC handlers\n  console.log('Removing all IPC handlers...');\n  ipcMain.removeHandler('widget:create');\n  ipcMain.removeHandler('widget:close');\n  ipcMain.removeHandler('widget:getAll');\n  ipcMain.removeHandler('widget:setPosition');\n  ipcMain.removeHandler('widget:setSize');\n  ipcMain.removeHandler('widget:setAlwaysOnTop');\n  ipcMain.removeHandler('widget:setOpacity');\n  ipcMain.removeHandler('widget:setVisible');\n  ipcMain.removeHandler('widget:updateParams');\n  ipcMain.removeHandler('app:quit');\n  ipcMain.removeHandler('telemetry:getData');\n  ipcMain.removeHandler('telemetry:getConnectionStatus');\n  \n  // Remove all listeners\n  ipcMain.removeAllListeners('widget:closeByEscape');\n  ipcMain.removeAllListeners('telemetry:update');\n  ipcMain.removeAllListeners('telemetry:connectionChange');\n  ipcMain.removeAllListeners('widget:registerForUpdates');\n});\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit();\n  mainWindow = null;\n});\n\n// Add shutdown handler for main window to close all widgets\nipcMain.handle('app:quit', () => {\n  // Close all widget windows first\n  if (widgetManager) {\n    const windows = widgetManager.getAllWidgetWindows();\n    for (const [widgetId, window] of windows.entries()) {\n      if (!window.isDestroyed()) {\n        window.close();\n      }\n    }\n  }\n  // Then quit the application\n  app.quit();\n  return { success: true };\n});\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) createWindow();\n});\n"],"names":["__filename","__dirname"],"mappings":"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"}